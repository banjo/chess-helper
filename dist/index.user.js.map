{"mappings":"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","sources":["src/index.ts","src/main.ts","src/services/eventService.ts","src/services/configService.ts","src/services/domService.ts","src/models/chessMoves.ts","src/services/squareService.ts","src/models/chessTypes.ts","src/services/moveService.ts","src/hooks/square.ts","src/services/displayMoveService.ts","src/services/displayService.ts","src/services/pieceService.ts"],"sourcesContent":["// ==UserScript==\n// @name         Chess helper\n// @namespace    http://chess.com/\n// @version      0.1\n// @description  Chess helper\n// @author       You\n// @match        https://www.chess.com/*\n// @run-at       document-end\n// @grant        none\n// ==/UserScript==\n\nimport { main } from \"./main\";\n\nconst IS_TM_SCRIPT = document.readyState === \"interactive\";\nconst TIMEOUT_BEFORE_START = 2000;\n\nconst run = () => {\n    console.log(\"%c Chess helper starting...\", \"color: lightblue\");\n    setTimeout(() => {\n        const success = main();\n\n        if (success) {\n            console.log(\"%c Chess helper initialized!\", \"color: lightgreen\");\n        } else {\n            console.error(\n                \"%c Failed to initialize application\",\n                \"color: lightred\"\n            );\n        }\n    }, TIMEOUT_BEFORE_START);\n};\n\nif (IS_TM_SCRIPT) {\n    window.onload = () => run();\n} else {\n    run();\n}\n\nexport {};\n","import { configService } from \"./services/configService\";\nimport { eventService } from \"./services/eventService\";\nimport { Config } from \"./types\";\n\nexport const main = () => {\n    try {\n        const leftClickSuccess = eventService.addLeftClickEvent();\n        const rightClickSuccess = eventService.addRightClickEvent();\n\n        if (!leftClickSuccess || !rightClickSuccess) return false;\n\n        return true;\n    } catch (error) {\n        console.error(error);\n        return false;\n    }\n};\n","import { configService } from './configService';\nimport { domService } from \"./domService\";\nimport { chessMoves } from \"./../models/chessMoves\";\nimport { squareService } from \"./squareService\";\nimport { displayMoveService } from \"./displayMoveService\";\nimport { displayService } from \"./displayService\";\n\nlet firstRun = true;\n\nconst addLeftClickEvent = () => {\n    const board = domService.getBoard();\n\n    if (board === null) return false;\n\n    board.addEventListener(\"click\", (e) => {\n        squareService.clearSquare(board);\n        displayMoveService.clearMoves();\n    });\n\n    return true;\n};\n\nconst addRightClickEvent = () => {\n\n    if (firstRun) {\n        configService.init();\n        firstRun = false;\n    }\n\n    const board = domService.getBoard();\n\n    if (board === null) return false;\n\n    board.addEventListener(\"contextmenu\", (e) => {\n        squareService.clearSquare(board);\n        displayMoveService.clearMoves();\n\n        const target = e.target;\n        const metaData = squareService.getMetaDataForSquare(target);\n\n        if (metaData === null) return;\n\n        const moves = chessMoves[metaData.type];\n\n        const possibleMoves = squareService.getPossibleMoveSquares(\n            moves,\n            metaData\n        );\n\n        displayMoveService.addMoves(possibleMoves);\n        displayService.displayMoves();\n    });\n\n    return true;\n};\n\nexport const eventService = { addLeftClickEvent, addRightClickEvent };\n","let playerIsWhiteCache = false;\n\nconst playerIsWhite = () => {\n    if (playerIsWhiteCache) return playerIsWhiteCache;\n\n    const firstCoordinateIsEight = document.querySelector(\".coordinates\").childNodes;\n\n    console.log(firstCoordinateIsEight);\n\n    const playerIsWhite = document\n        .querySelector(\"div.piece:nth-child(25)\")\n        ?.classList[1].startsWith(\"w\");\n\n    playerIsWhiteCache = playerIsWhite;\n    return playerIsWhite;\n};\n\nconst init = () => {\n    playerIsWhite();\n};\n\nexport const configService = { playerIsWhite, init };\n","const createElement = ({\n    type,\n    classes,\n}: {\n    type: string;\n    classes: string[];\n}) => {\n    const element = document.createElement(type);\n\n    classes.forEach((c) => element.classList.add(c));\n\n    return element;\n};\n\nconst getBoard = (): Element | null => {\n    const board = document.querySelector(\"chess-board\");\n    if (!board) return null;\n\n    return board;\n};\nexport const domService = { createElement, getBoard };\n","import { ChessType } from \"./chessTypes\";\n\nexport type Action =\n    | \"isFirstMove\"\n    | \"canAttack\"\n    | \"always\"\n    | \"isSafe\"\n    | \"towerUntouched\"\n    | \"castling\"\n    | \"base\";\n\nexport type ChessMove = {\n    x: number | \"n\" | \"n1\";\n    y: number | \"n\" | \"n1\";\n    condition?: Action[];\n};\n\nexport const chessMoves: Record<ChessType, ChessMove[]> = {\n    pawn: [\n        {\n            x: 0,\n            y: 1,\n            condition: [\"base\"]\n        },\n        {\n            x: 0,\n            y: 2,\n            condition: [\"isFirstMove\"],\n        },\n        {\n            y: 1,\n            x: 1,\n            condition: [\"canAttack\"],\n        },\n        {\n            y: 1,\n            x: -1,\n            condition: [\"canAttack\"],\n        },\n    ],\n    rook: [\n        {\n            y: \"n\",\n            x: 0,\n        },\n        {\n            y: 0,\n            x: \"n\",\n        },\n    ],\n    bishop: [\n        {\n            y: \"n1\",\n            x: \"n1\",\n        },\n    ],\n    queen: [\n        {\n            y: \"n1\",\n            x: \"n1\",\n        },\n        {\n            y: \"n\",\n            x: 0,\n        },\n        {\n            y: 0,\n            x: \"n\",\n        },\n    ],\n    knight: [\n        {\n            y: 2,\n            x: 1,\n            condition: [\"always\"],\n        },\n        {\n            y: 2,\n            x: -1,\n            condition: [\"always\"],\n        },\n        {\n            y: -2,\n            x: 1,\n            condition: [\"always\"],\n        },\n        {\n            y: -2,\n            x: -1,\n            condition: [\"always\"],\n        },\n        {\n            y: 1,\n            x: 2,\n            condition: [\"always\"],\n        },\n        {\n            y: 1,\n            x: -2,\n            condition: [\"always\"],\n        },\n        {\n            y: -1,\n            x: 2,\n            condition: [\"always\"],\n        },\n        {\n            y: -1,\n            x: -2,\n            condition: [\"always\"],\n        },\n    ],\n    king: [\n        {\n            y: 1,\n            x: 0,\n            condition: [\"isSafe\"],\n        },\n        {\n            y: 1,\n            x: 1,\n            condition: [\"isSafe\"],\n        },\n        {\n            y: 1,\n            x: -1,\n            condition: [\"isSafe\"],\n        },\n        {\n            y: -1,\n            x: 0,\n            condition: [\"isSafe\"],\n        },\n        {\n            y: -1,\n            x: 1,\n            condition: [\"isSafe\"],\n        },\n        {\n            y: -1,\n            x: -1,\n            condition: [\"isSafe\"],\n        },\n        {\n            y: 0,\n            x: 1,\n            condition: [\"isSafe\"],\n        },\n        {\n            y: 0,\n            x: -1,\n            condition: [\"isSafe\"],\n        },\n        // castling moves\n        {\n            y: 0,\n            x: 2,\n            condition: [\"isSafe\", \"isFirstMove\", \"towerUntouched\", \"castling\"],\n        },\n        {\n            y: 0,\n            x: -2,\n            condition: [\"isSafe\", \"isFirstMove\", \"towerUntouched\", \"castling\"],\n        },\n    ],\n};\n","import { displayMoveService } from \"./displayMoveService\";\nimport { configService } from \"./configService\";\nimport { chessTypes } from \"./../models/chessTypes\";\nimport { Config, MetaData } from \"./../types\";\nimport { ChessMove, chessMoves } from \"./../models/chessMoves\";\nimport { moveService } from \"./moveService\";\nimport { SquareObject } from \"../hooks/square\";\n\nconst clearSquare = (board: Element) => {\n    const toRemove = board.querySelectorAll(\".doRemove\");\n\n    for (const element of toRemove as any) {\n        element?.parentNode?.removeChild(element);\n    }\n\n    const highlightsToRemove = board.querySelectorAll(\".highlight\");\n\n    for (const element of highlightsToRemove as any) {\n        element?.classList?.remove(\"highlight\");\n    }\n};\n\nconst getCurrentLocationPieceInfo = (square: number, start: number) => {\n    if (square === start) return null;\n\n    const startSquare = Array.from(\n        document.querySelectorAll(`.square-${start}`)\n    ).find((e) => e.classList[0] === \"piece\");\n\n    const current = Array.from(\n        document.querySelectorAll(`.square-${square}`)\n    ).find((e) => e.classList[0] === \"piece\");\n\n    const isBlackPiecePlaying = startSquare?.classList[1]?.startsWith(\"b\");\n\n    const isOnPiece = (current: Element) => {\n        return current?.classList[0] === \"piece\";\n    };\n\n    const isStandingOnWhitePiece = (current: Element) => {\n        return current?.classList[1].startsWith(\"w\");\n    };\n\n    const isOnEnemy =\n        (isBlackPiecePlaying && isStandingOnWhitePiece(current)) ||\n        (!isBlackPiecePlaying && !isStandingOnWhitePiece(current));\n\n    return {\n        isOnPiece: isOnPiece(current),\n        isOnEnemyPiece: isOnPiece(current) ? isOnEnemy : false,\n    };\n};\n\nconst isLocatedOnEndOfBoard = (square: number) => {\n    const first = Number(String(square).charAt(0));\n    const last = Number(String(square).charAt(1));\n\n    if (first === 8 || first === 1) return true;\n    if (last === 8 || last === 1) return true;\n\n    return false;\n};\n\nconst isOutsideOfBoard = (square: number) => {\n    const first = Number(String(square).charAt(0));\n    const last = Number(String(square).charAt(1));\n\n    if (!first || !last) return true;\n\n    if (first > 8 || first < 1) return true;\n    if (last > 8 || last < 1) return true;\n\n    return false;\n};\n\nconst getPossibleMoveSquares = (moves: ChessMove[], metaData: MetaData) => {\n    let totalMoves: SquareObject[] = [];\n\n    for (const move of moves) {\n        let tempMoves: SquareObject[] = [];\n\n        switch (metaData.type) {\n            case \"pawn\":\n                const pawnMove = moveService.preparePawnMove(move, metaData);\n\n                if (pawnMove) tempMoves = [pawnMove];\n                break;\n            case \"rook\":\n                tempMoves = moveService.prepareNMoves(move, metaData);\n                break;\n            case \"bishop\":\n                tempMoves = moveService.prepareN1Moves(move, metaData);\n                break;\n            case \"queen\":\n                const isNMove = move.x === \"n\" || move.y === \"n\";\n\n                if (isNMove) {\n                    tempMoves = moveService.prepareNMoves(move, metaData);\n                } else {\n                    tempMoves = moveService.prepareN1Moves(move, metaData);\n                }\n                break;\n\n            case \"knight\":\n                const knightMove = moveService.prepareKnightMove(\n                    move,\n                    metaData\n                );\n\n                if (knightMove) tempMoves = [knightMove];\n                break;\n            case \"king\":\n                const kingMove = moveService.prepareKingMove(move, metaData);\n\n                if (kingMove) tempMoves = [kingMove];\n                break;\n            default:\n                console.log(\"Not implemented yet\");\n        }\n\n        totalMoves = [...totalMoves, ...tempMoves];\n    }\n\n    return totalMoves;\n};\n\nconst getMetaDataForSquare = (target): MetaData | null => {\n    if (target instanceof SVGElement) return null;\n\n    if (!target?.className?.includes(\"piece\")) return null;\n\n    const data = target.className.split(\" \");\n\n    const pieceInfo = data[1];\n    const squareInfo = data[2];\n\n    const square = squareInfo.split(\"-\")[1];\n    const pieceAbbreviation = pieceInfo[1];\n\n    return {\n        isWhite: pieceInfo.startsWith(\"b\") ? false : true,\n        type: chessTypes[pieceAbbreviation],\n        square: Number(square),\n    };\n};\n\nexport const squareService = {\n    clearSquare,\n    isOutsideOfBoard,\n    getCurrentLocationPieceInfo,\n    isLocatedOnEndOfBoard,\n    getPossibleMoveSquares,\n    getMetaDataForSquare,\n};\n","export type ChessType = \"pawn\" | \"rook\" | \"knight\" | \"bishop\" | \"queen\" | \"king\";\n\nexport const chessTypes: Record<string, ChessType> = {\n    p: \"pawn\",\n    r: \"rook\",\n    n: \"knight\",\n    b: \"bishop\",\n    q: \"queen\",\n    k: \"king\",\n};\n","import { configService } from \"./configService\";\nimport { Config, MetaData } from \"./../types\";\nimport { ChessMove } from \"../models/chessMoves\";\nimport { squareService } from \"./squareService\";\nimport { Square, SquareObject } from \"../hooks/square\";\n\nconst handleRepeatedMoveUntilBreak = (\n    square: SquareObject,\n    moves: SquareObject[],\n    callback: (square: SquareObject) => SquareObject\n) => {\n    let tempSquare = square.getSquare();\n    while (true) {\n        tempSquare = callback(tempSquare);\n\n        if (tempSquare?.isOutsideBoard() || tempSquare === null) {\n            break;\n        }\n\n        if (tempSquare.isOnPiece()) {\n            if (tempSquare.isOnEnemyPiece()) {\n                moves.push(tempSquare.getSquare());\n            } else {\n                tempSquare.setActivePiece(false);\n                moves.push(tempSquare.getSquare());\n            }\n            break;\n        }\n\n        moves.push(tempSquare.getSquare());\n    }\n};\n\nconst handleAxis = (\n    axis: \"y\" | \"x\",\n    square: SquareObject,\n    moveOnAxis: number\n) => {\n    const isPositive = moveOnAxis > 0;\n    const isNegative = moveOnAxis < 0;\n\n    if (isPositive) {\n        for (let i = 0; i < moveOnAxis; i++) {\n            if (axis === \"y\") square.moveUp();\n            if (axis === \"x\") square.moveRight();\n        }\n    }\n\n    if (isNegative) {\n        for (let i = 0; i > moveOnAxis; i--) {\n            if (axis === \"y\") square.moveDown();\n            if (axis === \"x\") square.moveLeft();\n        }\n    }\n};\n\nconst prepareKingMove = (\n    move: ChessMove,\n    metaData: MetaData\n): SquareObject | null => {\n    const x = move.x as number;\n    const y = move.y as number;\n\n    if (Number.isNaN(x) || Number.isNaN(y)) {\n        console.log(\"Both need to be numbers\");\n        return null;\n    }\n    const square = Square(metaData.square, metaData);\n\n    // TODO: handle castling\n    if (move.condition?.includes(\"castling\")) {\n        return null;\n    }\n\n    handleAxis(\"x\", square, x);\n    handleAxis(\"y\", square, y);\n\n    return square;\n};\n\nconst prepareKnightMove = (\n    move: ChessMove,\n    metaData: MetaData\n): SquareObject | null => {\n    const x = move.x as number;\n    const y = move.y as number;\n\n    if (Number.isNaN(x) || Number.isNaN(y)) {\n        console.log(\"Both need to be numbers\");\n        return null;\n    }\n\n    const square = Square(metaData.square, metaData);\n\n    handleAxis(\"x\", square, x);\n    handleAxis(\"y\", square, y);\n\n    return square;\n};\n\nconst prepareN1Moves = (\n    move: ChessMove,\n    metaData: MetaData\n): SquareObject[] => {\n    let moves = [] as SquareObject[];\n\n    if (move.x !== \"n1\" || move.y !== \"n1\") {\n        console.log(\"Both need to be n1\");\n        return moves;\n    }\n\n    const startSquare = Square(metaData.square, metaData);\n\n    handleRepeatedMoveUntilBreak(startSquare, moves, (square) => {\n        square.moveUp();\n        return square.moveRight();\n    });\n\n    handleRepeatedMoveUntilBreak(startSquare, moves, (square) => {\n        square.moveUp();\n        return square.moveLeft();\n    });\n\n    handleRepeatedMoveUntilBreak(startSquare, moves, (square) => {\n        square.moveDown();\n        return square.moveRight();\n    });\n\n    handleRepeatedMoveUntilBreak(startSquare, moves, (square) => {\n        square.moveDown();\n        return square.moveLeft();\n    });\n\n    return moves;\n};\n\nconst prepareNMoves = (move: ChessMove, metaData: MetaData): SquareObject[] => {\n    let moves = [] as SquareObject[];\n\n    if (move.x === \"n\" && move.y === \"n\") {\n        console.log(\"handle special case\");\n        return moves;\n    }\n\n    if (move.x !== \"n\" && move.y !== \"n\") {\n        console.log(\"Cannot have both x and y as n\");\n        return moves;\n    }\n\n    const handleVertical = move.y === \"n\";\n    const square = Square(metaData.square, metaData);\n\n    if (handleVertical) {\n        handleRepeatedMoveUntilBreak(square, moves, (square) =>\n            square.moveUp()\n        );\n        handleRepeatedMoveUntilBreak(square, moves, (square) =>\n            square.moveDown()\n        );\n    } else {\n        handleRepeatedMoveUntilBreak(square, moves, (square) =>\n            square.moveRight()\n        );\n        handleRepeatedMoveUntilBreak(square, moves, (square) =>\n            square.moveLeft()\n        );\n    }\n\n    return moves;\n};\n\nconst preparePawnMove = (\n    move: ChessMove,\n    metaData: MetaData\n): SquareObject | null => {\n    let square = Square(metaData.square, metaData);\n    const isWhitePlayerAndWhitePiece =\n        configService.playerIsWhite() && metaData.isWhite;\n\n    const checkIfFirstMove = (square: SquareObject) => {\n        if (isWhitePlayerAndWhitePiece) {\n            return square.getSquare().isOnRow(2);\n        } else {\n            return square.getSquare().isOnRow(7);\n        }\n    };\n\n    const isFirstMove = checkIfFirstMove(square);\n\n    const handleAxis = (\n        axis: \"x\" | \"y\",\n        move: ChessMove,\n        metaData: MetaData,\n        callbacks: {\n            blackAndPositive: (square: SquareObject) => void;\n            blackAndNegative: (square: SquareObject) => void;\n            whiteAndPositive: (square: SquareObject) => void;\n            whiteAndNegative: (square: SquareObject) => void;\n        }\n    ) => {\n        const value = move[axis];\n\n        if (value !== 0 && Number.isInteger(value)) {\n            let x = value as number;\n            const isPositive = x > 0;\n\n            if (isWhitePlayerAndWhitePiece) {\n                for (let i = 0; i < Math.abs(x); i++) {\n                    if (isPositive) {\n                        callbacks.whiteAndPositive(square);\n                    } else {\n                        callbacks.whiteAndNegative(square);\n                    }\n\n                    if (square.isOnPiece()) {\n                        break;\n                    }\n                }\n            } else {\n                for (let i = 0; i < Math.abs(x); i++) {\n                    if (isPositive) {\n                        callbacks.blackAndPositive(square);\n                    } else {\n                        callbacks.blackAndNegative(square);\n                    }\n\n                    if (square.isOnPiece()) {\n                        break;\n                    }\n                }\n            }\n        }\n    };\n\n    handleAxis(\"y\", move, metaData, {\n        blackAndPositive: (square) => square.moveDown(),\n        blackAndNegative: (square) => square.moveUp(),\n        whiteAndPositive: (square) => square.moveUp(),\n        whiteAndNegative: (square) => square.moveDown(),\n    });\n\n    handleAxis(\"x\", move, metaData, {\n        blackAndPositive: (square) => square.moveLeft(),\n        blackAndNegative: (square) => square.moveRight(),\n        whiteAndPositive: (square) => square.moveRight(),\n        whiteAndNegative: (square) => square.moveLeft(),\n    });\n\n    if (move?.condition?.includes(\"isFirstMove\") && !isFirstMove) {\n        return null;\n    }\n\n    if (\n        move?.condition?.includes(\"isFirstMove\") &&\n        isFirstMove &&\n        square.isOnPiece()\n    ) {\n        square.setCanAttack(false);\n        square.setActivePiece(false);\n        return square;\n    }\n\n    if (move?.condition?.includes(\"isFirstMove\") && isFirstMove) {\n        square.setCanAttack(false);\n        return square;\n    }\n\n    if (move?.condition?.includes(\"canAttack\") && !square.isOnEnemyPiece()) {\n        square.setActivePiece(false);\n        return square;\n    }\n\n    if (move?.condition?.includes(\"canAttack\") && square.isOnEnemyPiece()) {\n        square.setCanAttack(true);\n        return square;\n    }\n\n    if (!move?.condition?.includes(\"canAttack\") && square.isOnPiece()) {\n        square.setActivePiece(false);\n        square.setCanAttack(false);\n        return square;\n    }\n\n    if (move?.condition?.includes(\"base\")) {\n        square.setCanAttack(false);\n        return square;\n    }\n\n    return square;\n};\n\nexport const moveService = {\n    preparePawnMove,\n    prepareKnightMove,\n    prepareKingMove,\n    prepareNMoves,\n    prepareN1Moves,\n};\n","import { MetaData } from \"./../types\";\nimport { ChessType } from \"./../models/chessTypes\";\nimport { squareService } from \"./../services/squareService\";\nconst ALTERATION_FIRST = 10;\nconst ALTERATION_LAST = 1;\n\nexport type SquareObject = {\n    getStartSquareNumber: () => number;\n    getStartSquare: () => SquareObject;\n    getFirst: () => number;\n    getLast: () => number;\n    getCurrent: () => number;\n    getMetaData: () => MetaData;\n    moveRight: () => SquareObject | null;\n    moveLeft: () => SquareObject | null;\n    moveUp: () => SquareObject | null;\n    moveDown: () => SquareObject | null;\n    setActivePiece: (boolean: boolean) => void;\n    setCanAttack: (attacking: boolean) => void;\n    canAttack: () => boolean;\n    isActivePiece: () => boolean;\n    isOnPiece: () => boolean;\n    isOnEnemyPiece: () => boolean;\n    isOnEndOfBoard: () => boolean;\n    isOutsideBoard: () => boolean;\n    isOnRow: (row: number) => boolean;\n    getSquare: () => SquareObject;\n};\n\nexport type SquareHook = (\n    square: number | string,\n    metaData: MetaData,\n    startSquare?: null | number\n) => SquareObject;\n\nexport const Square: SquareHook = (\n    square: number | string,\n    metaData: MetaData,\n    startSquare: null | number = null\n) => {\n    startSquare = startSquare ?? Number(square);\n    let current = Number(square);\n    let isOnPiece = false;\n    let isOnEnemyPiece = false;\n    let isOnEndOfBoard = false;\n    let isOutsideBoard = false;\n    let isActivePiece = true; // active meaning that the move is valid. For example, a pawn can attack diagonally, but only if there is a piece there. Meaning that that square is registered as a move, but not active.\n    let canAttack = true; // can be false if the piece cannot overtake another piece even though the move can be done.\n\n    const validate = () => {\n        const info = squareService.getCurrentLocationPieceInfo(\n            current,\n            startSquare\n        );\n\n        if (info) {\n            isOnPiece = info.isOnPiece;\n            isOnEnemyPiece = info.isOnEnemyPiece;\n        } else {\n            isOnPiece = false;\n            isOnEnemyPiece = false;\n        }\n\n        if (squareService.isLocatedOnEndOfBoard(current)) {\n            isOnEndOfBoard = true;\n        }\n\n        if (squareService.isOutsideOfBoard(current)) {\n            isOutsideBoard = true;\n        }\n    };\n\n    validate();\n\n    const getFirst = () => Number(String(current).charAt(0));\n    const getLast = () => Number(String(current).charAt(1));\n\n    const moveRight = () => {\n        current += ALTERATION_FIRST;\n        validate();\n        return Square(current, metaData, startSquare);\n    };\n\n    const moveLeft = () => {\n        current -= ALTERATION_FIRST;\n        validate();\n        return Square(current, metaData, startSquare);\n    };\n\n    const moveUp = () => {\n        current += ALTERATION_LAST;\n        validate();\n        return Square(current, metaData, startSquare);\n    };\n\n    const moveDown = () => {\n        current -= ALTERATION_LAST;\n        validate();\n        return Square(current, metaData, startSquare);\n    };\n\n    const setActivePiece = (active: boolean) => {\n        isActivePiece = active;\n    };\n\n    const setCanAttack = (attacking: boolean) => {\n        canAttack = attacking;\n    };\n\n    return {\n        getStartSquareNumber: () => startSquare,\n        getStartSquare: () => Square(startSquare, metaData),\n        getFirst,\n        getLast,\n        getCurrent: () => current,\n        getMetaData: () => metaData,\n        moveRight,\n        moveLeft,\n        moveUp,\n        moveDown,\n        setActivePiece,\n        setCanAttack,\n        isActivePiece: () => isActivePiece,\n        canAttack: () => canAttack,\n        isOnPiece: () => isOnPiece,\n        isOnEnemyPiece: () => isOnEnemyPiece,\n        isOnEndOfBoard: () => isOnEndOfBoard,\n        isOutsideBoard: () => isOutsideBoard,\n        isOnRow: (row: number) => getLast() === row,\n        getSquare: () => Square(current, metaData, startSquare),\n    };\n};\n","import { SquareObject } from \"../hooks/square\";\nimport { squareService } from \"./squareService\";\n\nconst moves: SquareObject[] = [];\n\nconst addMoves = (square: SquareObject | SquareObject[] | null | undefined) => {\n    if (!square) return;\n\n    const validate = (square: SquareObject) => {\n        if (squareService.isOutsideOfBoard(square.getCurrent())) return;\n        moves.push(square);\n    };\n\n    if (Array.isArray(square)) {\n        square.forEach(validate);\n        return;\n    }\n\n    validate(square);\n};\n\nconst getMoves = () => {\n    return moves;\n};\n\nconst clearMoves = () => {\n    moves.length = 0;\n};\n\nexport const displayMoveService = { addMoves, getMoves, clearMoves };\n","import { squareService } from \"./squareService\";\nimport { configService } from \"./configService\";\nimport { SquareObject } from \"./../hooks/square\";\nimport { displayMoveService } from \"./displayMoveService\";\nimport { domService } from \"./domService\";\nimport { pieceService } from \"./pieceService\";\n\nconst BACKGROUND_COLORS = {\n    green: \"lightgreen\",\n    gray: \"lightgray\",\n    red: \"red\",\n    orange: \"orange\",\n};\n\nconst showPiecesInDanger = ({\n    board,\n    currentUserPieces,\n    possibleEnemyMoves,\n}: {\n    board: Element;\n    currentUserPieces: Element[];\n    possibleEnemyMoves: SquareObject[];\n}) => {\n    currentUserPieces.forEach((piece) => {\n        const squareMetaData = squareService.getMetaDataForSquare(piece);\n\n        const isPieceInDanger = possibleEnemyMoves.some(\n            (s) => s.getCurrent() === squareMetaData.square\n        );\n\n        const element = domService.createElement({\n            type: \"div\",\n            classes: [\n                \"capture-hint\",\n                `square-${squareMetaData.square}`,\n                \"doRemove\",\n            ],\n        });\n\n        if (isPieceInDanger) {\n            element.style.borderWidth = \"8px\";\n            element.style.borderColor = BACKGROUND_COLORS.red;\n            element.style.opacity = \"0.5\";\n            board?.appendChild(element);\n        }\n    });\n};\n\nconst showPossibleMoves = ({\n    board,\n    activeMoves,\n    possibleEnemyMoves,\n}: {\n    board: Element;\n    activeMoves: SquareObject[];\n    possibleEnemyMoves: SquareObject[];\n}) => {\n    activeMoves.forEach((square) => {\n        if (square === null || square === undefined) return;\n        if (square.getCurrent() === square.getStartSquareNumber()) return;\n        if (square.isOnPiece() && !square.isOnEnemyPiece()) return;\n\n        const classes = [\"hint\", `square-${square.getCurrent()}`, \"doRemove\"];\n\n        if (square.isOnEnemyPiece()) classes.push(\"enemy\");\n\n        const element = domService.createElement({\n            type: \"div\",\n            classes,\n        });\n\n        const isPossibleEnemyMove = possibleEnemyMoves.some(\n            (s) => s.getCurrent() === square.getCurrent()\n        );\n\n        const isUserPiece =\n            (configService.playerIsWhite() && square.getMetaData().isWhite) ||\n            (!configService.playerIsWhite() && !square.getMetaData().isWhite);\n\n        const pieceCoveredByAmount = possibleEnemyMoves.filter(\n            (s) => s.getCurrent() === square.getCurrent()\n        ).length;\n\n        let color = BACKGROUND_COLORS.gray;\n        if (isUserPiece) {\n            if (isPossibleEnemyMove && square.isOnEnemyPiece()) {\n                color = BACKGROUND_COLORS.orange;\n            } else if (isPossibleEnemyMove) {\n                color = BACKGROUND_COLORS.orange;\n            } else if (square.isOnEnemyPiece()) {\n                color = BACKGROUND_COLORS.green;\n            }\n\n            if (pieceCoveredByAmount > 1) {\n                element.textContent = pieceCoveredByAmount.toString();\n                element.style.display = \"grid\";\n                element.style.placeItems = \"center\";\n            }\n        }\n\n        element.style.backgroundColor = color;\n        element.style.opacity = \"0.5\";\n        board?.appendChild(element);\n    });\n};\n\nconst showPossibleFreeCaptures = ({\n    board,\n    allPossibleUserMoves,\n    possibleEnemyMoves,\n}: {\n    board: Element;\n    allPossibleUserMoves: SquareObject[];\n    possibleEnemyMoves: SquareObject[];\n}) => {\n    allPossibleUserMoves.forEach((square) => {\n        if (square === null || square === undefined) return;\n        if (square.getCurrent() === square.getStartSquareNumber()) return;\n        if (square.isOnPiece() && !square.isOnEnemyPiece()) return;\n        if (!square.isOnEnemyPiece()) return;\n\n        const isPossibleEnemyMove = possibleEnemyMoves.some(\n            (s) => s.getCurrent() === square.getCurrent()\n        );\n\n        const isUserPiece =\n            (configService.playerIsWhite() && square.getMetaData().isWhite) ||\n            (!configService.playerIsWhite() && !square.getMetaData().isWhite);\n\n        const classes = [\n            \"capture-hint\",\n            `square-${square.getCurrent()}`,\n            \"doRemove\",\n        ];\n\n        const element = domService.createElement({\n            type: \"div\",\n            classes,\n        });\n\n        if (isUserPiece && !isPossibleEnemyMove) {\n            element.style.borderWidth = \"8px\";\n            element.style.borderColor = BACKGROUND_COLORS.green;\n            element.style.opacity = \"0.5\";\n            board?.appendChild(element);\n        }\n    });\n};\n\nconst displayMoves = () => {\n    const board = domService.getBoard();\n    const possibleEnemyMoves = pieceService.getPossibleEnemyMoves();\n    const moves = displayMoveService.getMoves(); // moves for that particlar piece\n    const activeMoves = moves.filter((s) => s.isActivePiece());\n    const currentUserPieces = pieceService.getCurrentUserPieces();\n    const allPossibleUserMoves = pieceService.getPossibleUserMoves();\n\n    showPiecesInDanger({ board, currentUserPieces, possibleEnemyMoves });\n    showPossibleMoves({ board, activeMoves, possibleEnemyMoves });\n    showPossibleFreeCaptures({\n        board,\n        allPossibleUserMoves,\n        possibleEnemyMoves,\n    });\n};\n\nexport const displayService = { displayMoves };\n","import { chessMoves } from \"../models/chessMoves\";\nimport { SquareObject } from \"../hooks/square\";\nimport { configService } from \"./configService\";\nimport { squareService } from \"./squareService\";\n\nconst getCurrentEnemyPieces = () => {\n    const enemyPieces = Array.from(document.querySelectorAll(\".piece\")).filter(\n        (element) => {\n            const metaData = squareService.getMetaDataForSquare(element);\n            return metaData?.isWhite !== configService.playerIsWhite();\n        }\n    );\n\n    return enemyPieces;\n};\n\nconst getCurrentUserPieces = () => {\n    const userPieces = Array.from(document.querySelectorAll(\".piece\")).filter(\n        (element) => {\n            const metaData = squareService.getMetaDataForSquare(element);\n            return metaData?.isWhite === configService.playerIsWhite();\n        }\n    );\n\n    return userPieces;\n};\n\nconst getPossibleEnemyMoves = () => {\n    const enemies = getCurrentEnemyPieces().map((element) =>\n        squareService.getMetaDataForSquare(element)\n    );\n\n    const possibleEnemyMoves = enemies.reduce<SquareObject[]>(\n        (accumulator, enemy) => {\n            const moves = chessMoves[enemy.type];\n            const possibleMoves = squareService.getPossibleMoveSquares(\n                moves,\n                enemy\n            );\n\n            return [\n                ...accumulator,\n                ...possibleMoves.filter((s) => s.canAttack()),\n            ];\n        },\n        []\n    );\n\n    return possibleEnemyMoves;\n};\n\nconst getPossibleUserMoves = () => {\n    const userPieces = getCurrentUserPieces().map((element) =>\n        squareService.getMetaDataForSquare(element)\n    );\n\n    const possibleUserMoves = userPieces.reduce<SquareObject[]>(\n        (accumulator, userPiece) => {\n            const moves = chessMoves[userPiece.type];\n            const possibleMoves = squareService.getPossibleMoveSquares(\n                moves,\n                userPiece\n            );\n\n            return [\n                ...accumulator,\n                ...possibleMoves.filter((s) => s.canAttack()),\n            ];\n        },\n        []\n    );\n\n    return possibleUserMoves;\n};\n\nexport const pieceService = {\n    getPossibleEnemyMoves,\n    getPossibleUserMoves,\n    getCurrentEnemyPieces,\n    getCurrentUserPieces,\n};\n"],"names":[],"version":3,"file":"index.user.js.map","sourceRoot":"../"}